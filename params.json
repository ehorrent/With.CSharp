{"name":"With.Extensions","tagline":"Extension methods used to copy and update immutable classes","body":"With.Extensions\r\n===================\r\n\r\nExtension methods used to copy and update immutable classes (as [_copy and update record expression_](https://msdn.microsoft.com/en-us/library/dd233184.aspx) in F#).\r\n\r\n### Usage\r\n```C#\r\n  var source = Tuple.Create(\"first value\", \"second value\");\r\n\r\n  // Copy and update 'Item1' member\r\n  var updated = source.With(obj => obj.Item1, \"new first value\")\r\n                      .Create();  \r\n\r\n  System.Diagnostics.Debug.Assert(\r\n  \tupdated.Item1 == \"new first value\" &&\r\n  \tupdated.Item2 == obj.SecondField);\r\n```\r\n### Chaining\r\nCalling **_With extension_** will cause all future method calls to return wrapped query objects. When you've finished, call **_Create()_** to get the final value.\r\n```C#\r\n  var source = Tuple.Create(1, 2, 3);\r\n\r\n  // Only create a query object\r\n  var query = source.With(obj => obj.Item1, 2)\r\n                    .With(obj => obj.Item2, 4);\r\n\r\n  // Execute the query to create a new object\r\n  var updated = query.Create();\r\n\r\n  System.Diagnostics.Debug.Assert(\r\n    updated.Item1 == 2 &&\r\n    updated.Item2 == 4 &&\r\n    updated.Item3 == 3);\r\n```\r\n### How does it work ?\r\nFor a given immutable class, the extension search for actual values to use as parameters in the constructor (by using parameter's name).\r\n\r\n### Restrictions\r\nTo use the extension, your immutable class must define a **unique constructor**.\r\n\r\n### Naming conventions\r\nBy default, name of a constructor argument must match the name of a corresponding field/property (using **camel case convention**). For example, if a constructor argument is named 'value', extension will search for a field/property named 'Value'.\r\n\r\nWhen calling **Create**, you can override default behavior by providing your own name converter.\r\nFor example, if you use 'm_' prefixes :\r\n```C#\r\n  public class Immutable\r\n  {\r\n    public readonly string m_FirstField;\r\n    public readonly string m_SecondField;\r\n\r\n    public Immutable(string firstField, string secondField)\r\n    {\r\n      this.m_FirstField = firstField;\r\n      this.m_SecondField = secondField;\r\n    }\r\n  }\r\n\r\n  ...\r\n\r\n  var instance = new Immutable(\"first value\", \"second value\");\r\n  var updated = instance.With(obj => obj.m_FirstField, \"new first value\")\r\n                        .Create(name =>\r\n                          string.Concat(\"m_\", Naming.CamelCase.Convert(name)));\r\n```\r\n\r\n### Download\r\nNuGet package can be downloaded [here](https://www.nuget.org/packages/With.Extensions).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}